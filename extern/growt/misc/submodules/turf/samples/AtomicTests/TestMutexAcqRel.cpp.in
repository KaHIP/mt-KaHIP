// This test is based on the blog post: http://preshing.com/20121019/this-is-why-they-call-it-a-weakly-ordered-cpu

#include <turf/Core.h>
#include <turf/extra/JobDispatcher.h>
#include <turf/extra/TimeWaster.h>
#include <turf/Atomic.h>
#include <turf/Assert.h>
#include <stdio.h>

using namespace turf::intTypes;

#cmakedefine01 TEST_FORCE_FAIL

static turf::extra::TimeWaster g_timeWasters[4];
static turf::Atomic<u${TEST_INT_BITSIZE}> g_flag;
static u32 g_sharedValue;

static void threadFunc(ureg threadNum) {
    turf::extra::TimeWaster& tw = g_timeWasters[threadNum];

    ureg count = 0;
    while (count < 5000000) {
        tw.wasteRandomCycles();
        if (g_flag.compareExchange(0, 1, turf::Relaxed) == 0) { // Lock succeeded
#if !TEST_FORCE_FAIL
            turf::threadFenceAcquire();
#endif
            g_sharedValue++;
#if !TEST_FORCE_FAIL
            turf::threadFenceRelease();
#endif
            g_flag.store(0, turf::Relaxed);
            count++;
        }
    }
}

bool ${TEST_FUNC}(ureg numThreads) {
    TURF_ASSERT(numThreads <= 4);

    g_flag.storeNonatomic(0);
    g_sharedValue = 0;
    turf::extra::JobDispatcher jobDispatcher(numThreads);
    jobDispatcher.kick(threadFunc);
    bool success = (g_sharedValue == u32(5000000) * numThreads);
    if (!success)
        printf(" g_sharedValue=%" TURF_U64D, (u64) g_sharedValue);
    return success;
}
